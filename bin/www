#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dumpster:server');
var http = require('http');

var MongoClient = require('mongodb').MongoClient;

var myCollection;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var subscribe = function() {

  var args = [].slice.call(arguments);
  var next = args.pop();
  var filter = args.shift() || {};
  var db = MongoClient.connect('mongodb://127.0.0.1:27017/dumpster', function(err, db) {
    if (err)
      throw err;
    console.log("connected to the mongoDB !");
    myCollection = db.collection('log');

    myCollection.insert({source: 'node', severity: 1, message: 'Testing...'}, function(r) {

    });

    var filter = {};
    // seek to latest object
    var seekCursor = myCollection.find(filter).sort({$natural: -1}).limit(1);
    seekCursor.nextObject(function(err, latest) {
      if (latest) {
        filter._id = {$gt: latest._id}
      }
      // set MongoDB cursor options
      var cursorOptions = {
        tailable: true,
        awaitdata: true,
        numberOfRetries: -1
      };
      // create stream and listen
      var stream = myCollection.find(filter, cursorOptions).sort({$natural: -1}).stream();
      // call the callback
      stream.on('data', next);
    });


  });
};

io.on('connection', function (socket) {

  subscribe(function(document) {
    // console.log(document);
    socket.emit('news', document);
  });

  socket.emit('news', { message: 'Message', _id: 'Id' });

});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
